def customImage
def dockerImage = 'rabbitmq'
def awsRegion = 'us-gov-east-1'
def awsAccount = '067980236515'
def gitTag

pipeline {
  agent { label 'jenkins-agent-docker' }
  triggers {
    bitbucketPush()
  }
  environment {
    TAG_NAME = sh(returnStdout: true, script: "git tag --points-at HEAD| tr '[:upper:]' '[:lower:]'").trim()
    TAG_NAME_ACT = sh(returnStdout: true, script: "git tag --points-at HEAD").trim()
	GIT_SSH_COMMAND = "ssh -i /etc/ssh/git_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
  }

  stages {

    stage('Check For Jenkins Auto Commit') {
	  when { changelog 'AUTO COMMIT: JENKINS' }
      steps {
        script {
          error "Stopping build as it was triggered from auto commit in last job"
        }
      }
    }
	
    stage('Build image') {
	  steps {
	    script {
          customImage = docker.build("${awsAccount}.dkr.ecr.${awsRegion}.amazonaws.com/${dockerImage}")
	    }
      }	
    }

    stage('Test image') {
      steps {
        script {	  
          customImage.inside {
            sh 'echo "Tests passed"'
          }
		}  
	  }	
    }
    
	stage('Create Repo') { 
      steps {
	    sh """
          if aws ecr --region ${awsRegion} describe-repositories --repository-name ${dockerImage} --output json --query 'repositories[*].repositoryName[]' 2>&1; then
            echo "Repo Already exists"
          else
			echo "Building Repository"		  
	        aws ecr --region ${awsRegion} create-repository --repository-name ${dockerImage} --image-scanning-configuration scanOnPush=true
		  fi
		  echo "Updating Policy"
		  aws ecr --region ${awsRegion} set-repository-policy --repository-name ${dockerImage} --registry-id ${awsAccount} --policy-text file://Jenkins/policy.json
		"""  
      }
    }
	
    stage('Push Image - Latest') {
      steps {
	    sh "aws ecr get-login-password --region ${awsRegion} | docker login --username AWS --password-stdin ${awsAccount}.dkr.ecr.${awsRegion}.amazonaws.com"
        script {
          docker.withRegistry("https://${awsAccount}.dkr.ecr.${awsRegion}.amazonaws.com/${dockerImage}") {
            customImage.push("latest")
          }
        }
      }
	}  
	
	stage('Push Image - Version') {  
      steps {
        script {
	      if (env.TAG_NAME.equals("major") | env.TAG_NAME.equals("minor") | env.TAG_NAME.equals("patch")) {
		    gitTag = sh (returnStdout: true, script: "bump2version --dry-run --config-file Jenkins/.bumpversion.cfg --list ${env.TAG_NAME} | grep new_version | sed -r s,'^.*=',,").trim()
		  } else {
		    gitTag = sh (returnStdout: true, script: "bump2version --dry-run --config-file Jenkins/.bumpversion.cfg --list patch | grep current_version | sed -r s,'^.*=',,").trim()
		  }
          docker.withRegistry("https://${awsAccount}.dkr.ecr.${awsRegion}.amazonaws.com/${dockerImage}") {		
            customImage.push("${gitTag}")
		  }			
        }		
	  }
    }
    stage('Commit New Version File') {
	  when { expression { env.TAG_NAME.equals("major") | env.TAG_NAME.equals("minor") | env.TAG_NAME.equals("patch") } }
      steps {
	    sh """
		  bump2version --config-file Jenkins/.bumpversion.cfg ${env.TAG_NAME}
		  git remote set-url --add --push origin ssh://git@bbssh.cdmdashboard.com:7999/cw/${dockerImage}.git
		  git add Jenkins/.bumpversion.cfg
		  git commit -m 'AUTO COMMIT: JENKINS: updating version file'
		  git tag -d ${env.TAG_NAME_ACT}
		  git push --delete --set-upstream origin tag ${env.TAG_NAME_ACT}		  
		  git push --set-upstream origin master --follow-tags
        """
      }
	}	
  }
  post {
    always {
	  script {
	    def matcher = manager.getLogMatcher(".*Total time: (.*)\$")
	    if(matcher?.matches()) {
	      manager.addShortText(matcher.group(1), "grey", "white", "0px", "white")
	    }
	    manager.addShortText("${dockerImage}-${gitTag}")	 
      }
	  sh "docker rmi ${customImage.id}:latest"
	  sh "docker rmi ${customImage.id}:${gitTag}"
      cleanWs()	  
  }
}  
}